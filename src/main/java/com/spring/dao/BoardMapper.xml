<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<!-- namespace = 연결되는 인터페이스 -->    
<mapper namespace="com.spring.dao.BoardInter">

	<!-- 김대리의 한마디 글 리스트 -->
	<select id="kimsaymemberlist" resultType="String">
		SELECT member_id FROM member WHERE member_div='대리'
	</select>
	<select id="kimsayboardlist" resultType="com.spring.dto.BoardDTO">
		SELECT * FROM board WHERE member_id=#{param1}
		<!-- <where>
			<if test="keyword!=null and !keyword.equals('')">
				board_category LIKE '%'||#{keyword}||'%'
			</if>
		</where> -->
	</select>
	
	<select id="kimSaySearchList" resultType="int">
		SELECT board_title, board_category FROM board WHERE board_title=#{param1}
	</select>
	
	<!-- 김대리의 한마디 상세보기 -->
	<select id="kimSayDetail" resultType="com.spring.dto.BoardDTO">
		SELECT board_no, board_category, board_title, board_date, board_content, board_recom from board where board_no=#{param1}
	</select>
	
	<!-- 김대리의 한마디 글 작성 -->
	<insert id="kimSayWrite">
		INSERT INTO board(board_no, board_category, member_id, board_title, board_content) 
			VALUES(board_seq.NEXTVAL,#{param1},#{param4},#{param2},#{param3})
	</insert>
	
	<!-- param 순서 = inter 순서 -->
	<!-- 김대리의 한마디 수정-->	
	<update id="kimSayUpdate">
	 	UPDATE board SET board_category = #{param1}, board_title = #{param2}, board_content = #{param3} WHERE board_no = #{param4}
	 </update>
	
	<!-- 김대리의 한마디 삭제 -->
	<delete id="kimSayDelete" >
		DELETE FROM board WHERE board_no = #{param1} 
	</delete>
	
	
	<!-- 공지사항 리스트 및 검색-->
	<select id="nBoardList" parameterType="hashMap" resultType="com.spring.dto.BoardDTO">
		SELECT board_no,board_title,board_content,board_date,board_bHit 
			FROM 
			(SELECT board_no,board_title,board_content,board_date,board_bHit, 
					ROW_NUMBER() OVER(ORDER BY board_no DESC) 
					AS rnum FROM board
 				<where>
					<if test="keyword !=null || !keyword.equals('')">
						board_title LIKE '%'||#{keyword}||'%'  OR board_content LIKE '%'||#{keyword}||'%'
					</if>
				</where>    
				) WHERE rnum BETWEEN #{startPage} AND #{addPage} ORDER BY board_date DESC
	</select>
	
	<!-- 공지사항 작성  -->
	<!-- 글쓰기(등록된 글의 idx 컬럼을 반환) -->
	<!-- 
		parameterType="com.file.dto.BoardBean" <-파라메터로 사용될 빈
		useGenertedKeys="true" <- insert 후 키 생성 여부
		keyProperty = "idx" <- 키가 될 필드
		keyColumn = "idx" <- 키가 저장될 컬럼
	 -->
	<insert id="nBoardWrite"  parameterType="com.spring.dto.BoardDTO">
		INSERT INTO board(board_no,member_id,board_title,board_content) 
			VALUES(board_seq.NEXTVAL,'admin',#{board_title},#{board_content})
	</insert>
	
	
 	<!-- 공지사항 상세보기  -->
	<select id="nBoardDetail" resultType="com.spring.dto.BoardDTO"> 
	SELECT * FROM board WHERE board_no = #{param1}	
	</select>
	
	<!-- 공지사항 삭제 -->
	<delete id="nBoardDelete" >
		DELETE FROM board WHERE board_no = #{param1} 
	</delete>
	
	<!-- 공지사항 수정 -->
	<update id="nBoardUpdate" parameterType="hashMap">
		UPDATE board SET board_title = #{board_title}, board_content=#{board_content}
		WHERE board_no =#{board_no}
	</update>
	
	<!-- 조회수 증가 -->
	<update id="upHit">
		UPDATE board SET board_bHit = board_bHit+1 WHERE board_no= #{param1}
	</update> 	
	
	<select id="listCnt" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) FROM board WHERE member_id = #{loginId}
	</select>
	
	
	<select id="myWriteList" parameterType="map" resultType="com.spring.dto.BoardDTO">
		<!-- SELECT rnum, board_no, board_title, board_date 
		FROM (SELECT ROW_NUMBER() OVER(ORDER BY board_date DESC) AS rnum, board_no, board_title, board_date 
			FROM board WHERE member_id = 'test') 
		WHERE rnum BETWEEN #{sNum} AND #{eNum} -->
      
		SELECT rnum, board_no, board_title, board_date, member_id 
		FROM (SELECT ROW_NUMBER() OVER(ORDER BY board_date DESC) AS rnum, board_no, board_title, board_date, member_id FROM board) 
		<where>
			rnum BETWEEN #{sNum} AND #{eNum} AND member_id = #{userId}
		</where>
	</select>
   
	<select id="myWriteListCnt" parameterType="map" resultType="int">
   		SELECT COUNT(*) FROM board 
   		<where>
   			member_id = #{userId}
   		</where>
	</select>
	
	<select id="myReplyList" parameterType="map" resultType="com.spring.dto.ReplyDTO">
		SELECT rnum, board_no, reply_content, reply_date, member_id 
      	FROM (SELECT ROW_NUMBER() OVER(ORDER BY reply_date DESC) AS rnum, board_no, reply_content, reply_date, member_id FROM reply)
      	<where>
      		rnum BETWEEN #{sNum} AND #{eNum} AND member_id = #{userId}
      	</where>
	</select>
	
   	<select id="myReplyListCnt" parameterType="map" resultType="int">
   		SELECT COUNT(*) FROM reply 
   		<where>
   			member_id = #{userId}
   		</where>
	</select>
	
	<select id="myLikeCount" resultType="boolean" parameterType="String">
		SELECT COUNT(*) FROM recommand WHERE member_id = #{param1}
	</select>
	
	<select id="likeCount" resultType="int" parameterType="int">
		SELECT board_recom FROM board WHERE board_no = #{param1}
	</select>
	
	<insert id="myLikeUp">
		INSERT INTO recommand VALUES(#{param2}, #{param1})
	</insert>
	
	<delete id="myLikeDown">
		DELETE FROM recommand WHERE member_id = #{param1} AND board_no = #{param2}
	</delete>
	
	<!-- 추천수 증가 -->
	<update id="upLike">
		<if test="param1 != true">
			UPDATE board SET board_recom = board_recom+1 WHERE board_no = #{param2}
		</if>
		<if test="param1 == true">
			UPDATE board SET board_recom = board_recom-1 WHERE board_no = #{param2}
		</if>
	</update> 
	
	<insert id="replyWrite">
		INSERT INTO reply VALUES (reply_seq.NEXTVAL, #{param2}, #{param1}, #{param3}, SYSDATE) 
	</insert>

	<update id="replyCountUp">
		UPDATE board SET board_comm = board_comm+1 WHERE board_no = #{param1}
	</update>

	<select id="replyList" resultType="com.spring.dto.ReplyDTO" parameterType="int">
		SELECT * FROM reply WHERE board_no = #{param1} ORDER BY reply_no ASC 
	</select>
	
	<update id="replyUpdate">
		UPDATE reply SET reply_content = #{param2} WHERE reply_no = #{param1}
	</update>
	
	<delete id="replyDelete">
		DELETE FROM reply WHERE reply_no = #{param1}
	</delete>
	
	<update id="replyCountDown">
		UPDATE board SET board_comm = board_comm-1 WHERE board_no = #{param1}
	</update>
	
</mapper>