<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<!-- namespace = 연결되는 인터페이스 -->    
<mapper namespace="com.spring.dao.BoardInter">

	<!-- 김대리의 한마디 글 리스트 -->
	<select id="kimSayList" resultType="com.spring.dto.BoardDTO">
		SELECT board_title,board_date,board_bHit,board_recom,board_reply,board_no FROM board,member 
		WHERE member_div='대리' ORDER BY board_no DESC
	</select>
	
	<select id="kimSayDetail" resultType="com.spring.dto.BoardDTO">
		SELECT board_category, board_title, board_date, board_content from board where board_no=#{param1}
	</select>
	
	<!-- 공지사항 리스트 및 검색-->
	<select id="nBoardList" parameterType="hashMap" resultType="com.spring.dto.BoardDTO">
		SELECT board_no,board_title,board_content,board_date,board_bHit 
			FROM 
			(SELECT board_no,board_title,board_content,board_date,board_bHit, 
					ROW_NUMBER() OVER(ORDER BY board_no DESC) AS rnum FROM board
 				<where>
					<if test="keyword !=null || !keyword.equals('')">
						board_title LIKE '%'||#{keyword}||'%'  AND board_content LIKE '%'||#{keyword}||'%'
					</if>
				</where>    
				) WHERE rnum BETWEEN #{startPage} AND #{addPage} ORDER BY board_title ASC
	</select>
	
	<!-- 공지사항 작성  -->
	<!-- 글쓰기(등록된 글의 idx 컬럼을 반환) -->
	<!-- 
		parameterType="com.file.dto.BoardBean" <-파라메터로 사용될 빈
		useGenertedKeys="true" <- insert 후 키 생성 여부
		keyProperty = "idx" <- 키가 될 필드
		keyColumn = "idx" <- 키가 저장될 컬럼
	 -->
	<insert id="nBoardWrite"  parameterType="com.spring.dto.BoardDTO"
	useGeneratedKeys="true" keyProperty="board_no" 	keyColumn="board_no">
		INSERT INTO board(board_no,member_id,board_title,board_content) 
			VALUES(board_seq.NEXTVAL,#{member_id},#{board_title},#{board_content})
	</insert>
	
	
 	<!-- 공지사항 상세보기  -->
	<select id="nBoardDetail" resultType="com.spring.dto.BoardDTO"> 
	SELECT * FROM board WHERE board_no = #{param1}	
	</select>
	
	<!-- 공지사항 삭제 -->
	<delete id="nBoardDelete" >
		DELETE FROM board WHERE board_no = #{param1} 
	</delete>
	
	<!-- 공지사항 수정 -->
	<update id="nBoardUpdate" parameterType="hashMap">
		UPDATE board 
		<set>
			board_title=#{board_title}, board_content=#{board_content} 
		</set>
		WHERE board_no=#{board_no}
	</update>
	
	<!-- 조회수 증가 -->
	<update id="upHit">
		UPDATE board SET board_bHit = board_bHit+1 WHERE board_no= #{param1}
	</update> 	
	
	<select id="listCnt" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) FROM board 
<!-- 		<where>
			member_id = #{loginId}
		</where> -->
	</select>
	
	
	<select id="myWriteList" parameterType="map" resultType="com.spring.dto.BoardDTO">
		<!-- SELECT rnum, board_no, board_title, board_date 
		FROM (SELECT ROW_NUMBER() OVER(ORDER BY board_date DESC) AS rnum, board_no, board_title, board_date 
			FROM board WHERE member_id = 'test') 
		WHERE rnum BETWEEN #{sNum} AND #{eNum} -->
      
		SELECT rnum, board_no, board_title, board_date, member_id 
		FROM (SELECT ROW_NUMBER() OVER(ORDER BY board_date DESC) AS rnum, board_no, board_title, board_date, member_id FROM board) 
		<where>
			rnum BETWEEN #{sNum} AND #{eNum} AND member_id = #{userId}
		</where>
	</select>
   
	<select id="myWriteListCnt" parameterType="map" resultType="int">
   		SELECT COUNT(*) FROM board 
   		<where>
   			member_id = #{userId}
   		</where>
	</select>
	
	<select id="myReplyList" parameterType="map" resultType="com.spring.dto.ReplyDTO">
		SELECT rnum, board_no, reply_content, reply_date, member_id 
      	FROM (SELECT ROW_NUMBER() OVER(ORDER BY reply_date DESC) AS rnum, board_no, reply_content, reply_date, member_id FROM reply)
      	<where>
      		rnum BETWEEN #{sNum} AND #{eNum} AND member_id = #{userId}
      	</where>
	</select>
	
   	<select id="myReplyListCnt" parameterType="map" resultType="int">
   		SELECT COUNT(*) FROM reply 
   		<where>
   			member_id = #{userId}
   		</where>
	</select>
</mapper>